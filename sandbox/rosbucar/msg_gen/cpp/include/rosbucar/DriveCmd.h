/* Auto-generated by genmsg_cpp for file /home/carlos/fuerte_workspace/sandbox/rosbucar/msg/DriveCmd.msg */
#ifndef ROSBUCAR_MESSAGE_DRIVECMD_H
#define ROSBUCAR_MESSAGE_DRIVECMD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rosbucar
{
template <class ContainerAllocator>
struct DriveCmd_ {
  typedef DriveCmd_<ContainerAllocator> Type;

  DriveCmd_()
  : control_mode(0)
  , enabled(0)
  , value(0.0)
  {
  }

  DriveCmd_(const ContainerAllocator& _alloc)
  : control_mode(0)
  , enabled(0)
  , value(0.0)
  {
  }

  typedef uint8_t _control_mode_type;
  uint8_t control_mode;

  typedef uint8_t _enabled_type;
  uint8_t enabled;

  typedef float _value_type;
  float value;


  typedef boost::shared_ptr< ::rosbucar::DriveCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosbucar::DriveCmd_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DriveCmd
typedef  ::rosbucar::DriveCmd_<std::allocator<void> > DriveCmd;

typedef boost::shared_ptr< ::rosbucar::DriveCmd> DriveCmdPtr;
typedef boost::shared_ptr< ::rosbucar::DriveCmd const> DriveCmdConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rosbucar::DriveCmd_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rosbucar::DriveCmd_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rosbucar

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rosbucar::DriveCmd_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rosbucar::DriveCmd_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rosbucar::DriveCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "455e606c94e97c214f241839453a7b5c";
  }

  static const char* value(const  ::rosbucar::DriveCmd_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x455e606c94e97c21ULL;
  static const uint64_t static_value2 = 0x4f241839453a7b5cULL;
};

template<class ContainerAllocator>
struct DataType< ::rosbucar::DriveCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosbucar/DriveCmd";
  }

  static const char* value(const  ::rosbucar::DriveCmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rosbucar::DriveCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 control_mode\n\
uint8 enabled\n\
float32 value\n\
";
  }

  static const char* value(const  ::rosbucar::DriveCmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rosbucar::DriveCmd_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rosbucar::DriveCmd_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.control_mode);
    stream.next(m.enabled);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DriveCmd_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosbucar::DriveCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rosbucar::DriveCmd_<ContainerAllocator> & v) 
  {
    s << indent << "control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "value: ";
    Printer<float>::stream(s, indent + "  ", v.value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROSBUCAR_MESSAGE_DRIVECMD_H

