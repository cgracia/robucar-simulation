/* Auto-generated by genmsg_cpp for file /home/carlos/fuerte_workspace/sandbox/rosbucar/msg/DriveInfo.msg */
#ifndef ROSBUCAR_MESSAGE_DRIVEINFO_H
#define ROSBUCAR_MESSAGE_DRIVEINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace rosbucar
{
template <class ContainerAllocator>
struct DriveInfo_ {
  typedef DriveInfo_<ContainerAllocator> Type;

  DriveInfo_()
  : header()
  , control_mode(0)
  , status(0)
  , value(0.0)
  , pos(0.0)
  , speed(0.0)
  , torque(0.0)
  {
  }

  DriveInfo_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , control_mode(0)
  , status(0)
  , value(0.0)
  , pos(0.0)
  , speed(0.0)
  , torque(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _control_mode_type;
  uint8_t control_mode;

  typedef uint8_t _status_type;
  uint8_t status;

  typedef float _value_type;
  float value;

  typedef float _pos_type;
  float pos;

  typedef float _speed_type;
  float speed;

  typedef float _torque_type;
  float torque;


  typedef boost::shared_ptr< ::rosbucar::DriveInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosbucar::DriveInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DriveInfo
typedef  ::rosbucar::DriveInfo_<std::allocator<void> > DriveInfo;

typedef boost::shared_ptr< ::rosbucar::DriveInfo> DriveInfoPtr;
typedef boost::shared_ptr< ::rosbucar::DriveInfo const> DriveInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rosbucar::DriveInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rosbucar::DriveInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rosbucar

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rosbucar::DriveInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rosbucar::DriveInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rosbucar::DriveInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "977515947759055fcbe03b7e34285c7d";
  }

  static const char* value(const  ::rosbucar::DriveInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x977515947759055fULL;
  static const uint64_t static_value2 = 0xcbe03b7e34285c7dULL;
};

template<class ContainerAllocator>
struct DataType< ::rosbucar::DriveInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosbucar/DriveInfo";
  }

  static const char* value(const  ::rosbucar::DriveInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rosbucar::DriveInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
uint8 control_mode\n\
uint8 status\n\
float32 value\n\
float32 pos\n\
float32 speed\n\
float32 torque\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::rosbucar::DriveInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::rosbucar::DriveInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::rosbucar::DriveInfo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rosbucar::DriveInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.control_mode);
    stream.next(m.status);
    stream.next(m.value);
    stream.next(m.pos);
    stream.next(m.speed);
    stream.next(m.torque);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DriveInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosbucar::DriveInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rosbucar::DriveInfo_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "value: ";
    Printer<float>::stream(s, indent + "  ", v.value);
    s << indent << "pos: ";
    Printer<float>::stream(s, indent + "  ", v.pos);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "torque: ";
    Printer<float>::stream(s, indent + "  ", v.torque);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROSBUCAR_MESSAGE_DRIVEINFO_H

