"""autogenerated by genpy from gps_novatel/NovatelInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class NovatelInfo(genpy.Message):
  _md5sum = "fffc7fc92588667ebe9605af5853709c"
  _type = "gps_novatel/NovatelInfo"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
uint16 sol_status
uint16 pos_type
float64 lat
float64 lon
float64 alt
float64 ondulation
uint16 datum_id 
float64 sigmaLat
float64 sigmaLon
float64 sigmaAlt
string base_id
float64 diff_age
float64 sol_age
uint16 nObs
uint16 nGPSL
uint16 nL1
uint16 nL2



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','sol_status','pos_type','lat','lon','alt','ondulation','datum_id','sigmaLat','sigmaLon','sigmaAlt','base_id','diff_age','sol_age','nObs','nGPSL','nL1','nL2']
  _slot_types = ['std_msgs/Header','uint16','uint16','float64','float64','float64','float64','uint16','float64','float64','float64','string','float64','float64','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sol_status,pos_type,lat,lon,alt,ondulation,datum_id,sigmaLat,sigmaLon,sigmaAlt,base_id,diff_age,sol_age,nObs,nGPSL,nL1,nL2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NovatelInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sol_status is None:
        self.sol_status = 0
      if self.pos_type is None:
        self.pos_type = 0
      if self.lat is None:
        self.lat = 0.
      if self.lon is None:
        self.lon = 0.
      if self.alt is None:
        self.alt = 0.
      if self.ondulation is None:
        self.ondulation = 0.
      if self.datum_id is None:
        self.datum_id = 0
      if self.sigmaLat is None:
        self.sigmaLat = 0.
      if self.sigmaLon is None:
        self.sigmaLon = 0.
      if self.sigmaAlt is None:
        self.sigmaAlt = 0.
      if self.base_id is None:
        self.base_id = ''
      if self.diff_age is None:
        self.diff_age = 0.
      if self.sol_age is None:
        self.sol_age = 0.
      if self.nObs is None:
        self.nObs = 0
      if self.nGPSL is None:
        self.nGPSL = 0
      if self.nL1 is None:
        self.nL1 = 0
      if self.nL2 is None:
        self.nL2 = 0
    else:
      self.header = std_msgs.msg.Header()
      self.sol_status = 0
      self.pos_type = 0
      self.lat = 0.
      self.lon = 0.
      self.alt = 0.
      self.ondulation = 0.
      self.datum_id = 0
      self.sigmaLat = 0.
      self.sigmaLon = 0.
      self.sigmaAlt = 0.
      self.base_id = ''
      self.diff_age = 0.
      self.sol_age = 0.
      self.nObs = 0
      self.nGPSL = 0
      self.nL1 = 0
      self.nL2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2H4dH3d.pack(_x.sol_status, _x.pos_type, _x.lat, _x.lon, _x.alt, _x.ondulation, _x.datum_id, _x.sigmaLat, _x.sigmaLon, _x.sigmaAlt))
      _x = self.base_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d4H.pack(_x.diff_age, _x.sol_age, _x.nObs, _x.nGPSL, _x.nL1, _x.nL2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 62
      (_x.sol_status, _x.pos_type, _x.lat, _x.lon, _x.alt, _x.ondulation, _x.datum_id, _x.sigmaLat, _x.sigmaLon, _x.sigmaAlt,) = _struct_2H4dH3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_id = str[start:end].decode('utf-8')
      else:
        self.base_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.diff_age, _x.sol_age, _x.nObs, _x.nGPSL, _x.nL1, _x.nL2,) = _struct_2d4H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2H4dH3d.pack(_x.sol_status, _x.pos_type, _x.lat, _x.lon, _x.alt, _x.ondulation, _x.datum_id, _x.sigmaLat, _x.sigmaLon, _x.sigmaAlt))
      _x = self.base_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d4H.pack(_x.diff_age, _x.sol_age, _x.nObs, _x.nGPSL, _x.nL1, _x.nL2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 62
      (_x.sol_status, _x.pos_type, _x.lat, _x.lon, _x.alt, _x.ondulation, _x.datum_id, _x.sigmaLat, _x.sigmaLon, _x.sigmaAlt,) = _struct_2H4dH3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_id = str[start:end].decode('utf-8')
      else:
        self.base_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.diff_age, _x.sol_age, _x.nObs, _x.nGPSL, _x.nL1, _x.nL2,) = _struct_2d4H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2H4dH3d = struct.Struct("<2H4dH3d")
_struct_2d4H = struct.Struct("<2d4H")
